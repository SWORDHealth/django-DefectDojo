{
    "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
    "version": "2.1.0",
    "runs": [
      {
        "tool": {
          "driver": {
            "name": "SnykCode",
            "semanticVersion": "1.0.0",
            "version": "1.0.0",
            "rules": [
              {
                "id": "go/InsecureHash",
                "name": "InsecureHash",
                "shortDescription": {
                  "text": "Use of Password Hash With Insufficient Computational Effort"
                },
                "defaultConfiguration": {
                  "level": "warning"
                },
                "help": {
                  "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n### Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "go"
                  ],
                  "categories": [
                    "Security"
                  ],
                  "exampleCommitFixes": [],
                  "exampleCommitDescriptions": [],
                  "precision": "very-high",
                  "repoDatasetSize": 0,
                  "cwe": [
                    "CWE-916"
                  ]
                }
              },
              {
                "id": "go/PT",
                "name": "PT",
                "shortDescription": {
                  "text": "Path Traversal"
                },
                "defaultConfiguration": {
                  "level": "error"
                },
                "help": {
                  "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "go"
                  ],
                  "categories": [
                    "Security"
                  ],
                  "exampleCommitFixes": [
                    {
                      "commitURL": "https://github.com/pacolang/paco/commit/d05f41cb0aa3167b86bd3b1063d07d7e64bec86f?diff=split#diff-7ddfb3e035b42cd70649cc33393fe32cR26",
                      "lines": [
                        {
                          "line": "// Commands",
                          "lineNumber": 24,
                          "lineChange": "added"
                        },
                        {
                          "line": "switch os.Args[1] {",
                          "lineNumber": 25,
                          "lineChange": "added"
                        },
                        {
                          "line": "case \"build\":",
                          "lineNumber": 26,
                          "lineChange": "added"
                        },
                        {
                          "line": "  err := buildCommand.Parse(os.Args[2:])",
                          "lineNumber": 27,
                          "lineChange": "added"
                        },
                        {
                          "line": "// Read the given file",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "bytes, err := ioutil.ReadFile(os.Args[1])",
                          "lineNumber": 17,
                          "lineChange": "removed"
                        },
                        {
                          "line": "bytes, err := ioutil.ReadFile(file)",
                          "lineNumber": 45,
                          "lineChange": "added"
                        },
                        {
                          "line": "if err != nil {",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "  log.Errorf(err)",
                          "lineNumber": 47,
                          "lineChange": "none"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/trinchan/slackbot/commit/c8350a18049c609ef7b6847666d07e69aca9fb46?diff=split#diff-f2f667c6f0bb538d9d35241bd93421fcL18",
                      "lines": [
                        {
                          "line": "func init() {",
                          "lineNumber": 15,
                          "lineChange": "none"
                        },
                        {
                          "line": "  flag.Parse()",
                          "lineNumber": 16,
                          "lineChange": "none"
                        },
                        {
                          "line": "  var configFile = flag.String(\"c\", \"config.json\", \"Config file (default ./config.json)\")",
                          "lineNumber": 17,
                          "lineChange": "none"
                        },
                        {
                          "line": "  config, err := ioutil.ReadFile(configFile)",
                          "lineNumber": 18,
                          "lineChange": "removed"
                        },
                        {
                          "line": "  config, err := ioutil.ReadFile(*configFile)",
                          "lineNumber": 18,
                          "lineChange": "added"
                        },
                        {
                          "line": "  if err != nil {",
                          "lineNumber": 19,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.Println(\"open config: \", err)",
                          "lineNumber": 20,
                          "lineChange": "none"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/ketchuphq/ketchup/commit/31630fa4703d23c6055439536fd661d3c47da038?diff=split#diff-d72b60c856c1aa9b8e14c2c3c4b221abL59",
                      "lines": [
                        {
                          "line": "Run: func(ctx *service.CommandContext) {",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "  ctx.RequireExactlyNArgs(1)",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "  f, err := os.Open(ctx.Args[0])",
                          "lineNumber": 58,
                          "lineChange": "removed"
                        },
                        {
                          "line": "  if err != nil {",
                          "lineNumber": 59,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    panic(err)",
                          "lineNumber": 60,
                          "lineChange": "removed"
                        },
                        {
                          "line": "  err := m.importFromJSON(ctx.Args[0])",
                          "lineNumber": 42,
                          "lineChange": "added"
                        },
                        {
                          "line": "if err != nil {",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tpanic(err)",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "func (m *Module) importFromJSON(path string) error {",
                          "lineNumber": 78,
                          "lineChange": "added"
                        },
                        {
                          "line": "  f, err := os.Open(path)",
                          "lineNumber": 79,
                          "lineChange": "added"
                        },
                        {
                          "line": "  if err != nil {",
                          "lineNumber": 80,
                          "lineChange": "added"
                        },
                        {
                          "line": "    return err",
                          "lineNumber": 81,
                          "lineChange": "added"
                        }
                      ]
                    }
                  ],
                  "exampleCommitDescriptions": [
                    "* remove default config file.",
                    "The tests are\nmoved to that package and improved.",
                    "Added support for escaped file names."
                  ],
                  "precision": "very-high",
                  "repoDatasetSize": 527,
                  "cwe": [
                    "CWE-23"
                  ]
                }
              },
              {
                "id": "go/TooSmallKeySize/test",
                "name": "TooSmallKeySize/test",
                "shortDescription": {
                  "text": "Inadequate Encryption Strength"
                },
                "defaultConfiguration": {
                  "level": "note"
                },
                "help": {
                  "markdown": "\n## Details\n\nImplementing encryption for the transmission and storage of sensitive information is essential. But encryption standards are constantly changing since attackers have more and more powerful resources at their disposal-along with more sophisticated attack algorithms. This means that encryption is only useful if it meets current standards appropriate for the type of data being transmitted or stored.\nWhen organizations use weakly encoded passwords or weak hashes (especially when they also utilize single-factor authentication, which places too much emphasis on passwords), attackers can potentially gain unauthorized access through a brute-force attack.\n\n### Best practices for prevention\n* Understand best practices of contemporary encryption algorithms and techniques.\n* Avoid encryption algorithms and techniques that are widely known to be outdated (for example, DES).\n* Implement multi-factor authentication to minimize reliance on a single factor, such as a password, that is too susceptible to brute-force attacks.",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "go"
                  ],
                  "categories": [
                    "Security",
                    "InTest"
                  ],
                  "exampleCommitFixes": [
                    {
                      "commitURL": "https://github.com/cs3org/reva/commit/38af4c15190bfbc83177107e8e00bf98c54fb009?diff=split#diff-99c46b42524a4b672d91f795f0cd434fL175",
                      "lines": [
                        {
                          "line": "func mustRSAKey() *rsa.PrivateKey {",
                          "lineNumber": 173,
                          "lineChange": "none"
                        },
                        {
                          "line": "  key, err := rsa.GenerateKey(rand.Reader, 1024)",
                          "lineNumber": 174,
                          "lineChange": "removed"
                        },
                        {
                          "line": "  key, err := rsa.GenerateKey(rand.Reader, 2048)",
                          "lineNumber": 174,
                          "lineChange": "added"
                        },
                        {
                          "line": "  if err != nil {",
                          "lineNumber": 175,
                          "lineChange": "none"
                        },
                        {
                          "line": "    // TODO really panic?",
                          "lineNumber": 176,
                          "lineChange": "none"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/dexidp/dex/commit/ebbea78a2eb0f89104ccedf54a7752f601b72fd5?diff=split#diff-f5a63b3798c32b70652a7c48786df8bdL139",
                      "lines": [
                        {
                          "line": "func GeneratePrivateKey() (*PrivateKey, error) {",
                          "lineNumber": 137,
                          "lineChange": "none"
                        },
                        {
                          "line": "  pk, err := rsa.GenerateKey(rand.Reader, 1024)",
                          "lineNumber": 138,
                          "lineChange": "removed"
                        },
                        {
                          "line": "  pk, err := rsa.GenerateKey(rand.Reader, 2048)",
                          "lineNumber": 138,
                          "lineChange": "added"
                        },
                        {
                          "line": "  if err != nil {",
                          "lineNumber": 139,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return nil, err",
                          "lineNumber": 140,
                          "lineChange": "none"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/golang/go/commit/5b20a18f3b985cdf116a0ea6dd589d26056b16ad?diff=split#diff-863700294a2fc12b6fb40449950e5a1aL31",
                      "lines": [
                        {
                          "line": "flag.Parse()",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "priv, err := rsa.GenerateKey(rand.Reader, 1024)",
                          "lineNumber": 30,
                          "lineChange": "removed"
                        },
                        {
                          "line": "}",
                          "lineNumber": 41,
                          "lineChange": "added"
                        },
                        {
                          "line": "priv, err := rsa.GenerateKey(rand.Reader, *rsaBits)",
                          "lineNumber": 43,
                          "lineChange": "added"
                        },
                        {
                          "line": "if err != nil {",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "  log.Fatalf(\"failed to generate private key: %s\", err)",
                          "lineNumber": 45,
                          "lineChange": "none"
                        }
                      ]
                    }
                  ],
                  "exampleCommitDescriptions": [
                    "allow passing of tls certificates via env vars or files -",
                    "Support the use of static RSA keys for JWT signature"
                  ],
                  "precision": "very-high",
                  "repoDatasetSize": 15,
                  "cwe": [
                    "CWE-326"
                  ]
                }
              },
              {
                "id": "go/InsecureHash/test",
                "name": "InsecureHash/test",
                "shortDescription": {
                  "text": "Use of Password Hash With Insufficient Computational Effort"
                },
                "defaultConfiguration": {
                  "level": "note"
                },
                "help": {
                  "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n### Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "go"
                  ],
                  "categories": [
                    "Security",
                    "InTest"
                  ],
                  "exampleCommitFixes": [],
                  "exampleCommitDescriptions": [],
                  "precision": "very-high",
                  "repoDatasetSize": 0,
                  "cwe": [
                    "CWE-916"
                  ]
                }
              }
            ]
          }
        },
        "results": []
      }
    ]
  }